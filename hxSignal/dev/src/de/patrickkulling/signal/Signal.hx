package de.patrickkulling.signal;class Signal<T>{	private var handlers:Array<T -> Void>;	public function new()	{		handlers = new Array<T -> Void>();	}	public function hasListeners():Bool	{		return listenerCount() > 0;	}	public function listenerCount():Int	{		return handlers.length;	}	public function bind(addableHandler:T -> Void):Void	{		if (handlers.length == 0)			handlers.push(addableHandler);		for (handler in handlers)		{			if (!Reflect.compareMethods(handler, addableHandler))				handlers.push(addableHandler);		}	}	public function unbind(removableHandler:T -> Void):Void	{		for (handler in handlers)		{			if (Reflect.compareMethods(handler, removableHandler))				handlers.remove(handler);		}	}	public function unbindAll():Void	{		handlers = new Array<T -> Void>();	}	public function dispatch(?data:T):Void	{		for (handler in handlers)			handler(data);	}}