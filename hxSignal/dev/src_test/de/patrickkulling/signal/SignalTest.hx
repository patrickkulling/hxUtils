package de.patrickkulling.signal;import massive.munit.Assert;class SignalTest{	var signal:Signal<String>;	var dispatchCount:Int;	var lastDispatchMessage:String;	@Before	public function before()	{		signal = new Signal<String>();		dispatchCount = 0;		lastDispatchMessage = "";	}	@Test	public function test_NewSignalShouldNotContainListeners():Void	{		Assert.isFalse(signal.hasListeners());	}	@Test	public function test_BindShouldAddListener():Void	{		signal.bind(handler);		Assert.areEqual(1, signal.listenerCount());	}	@Test	public function test_BindHandlerTwiceShouldNotAddListenerTwice():Void	{		signal.bind(handler);		signal.bind(handler);		Assert.areEqual(1, signal.listenerCount());	}	@Test	public function test_Bind2DifferentHandlers():Void	{		signal.bind(handler);		signal.bind(anotherHandler);		Assert.areEqual(2, signal.listenerCount());	}	@Test	public function test_UnbindShouldRemoveListener():Void	{		signal.bind(handler);		signal.bind(anotherHandler);		signal.unbind(handler);		Assert.areEqual(1, signal.listenerCount());	}	@Test	public function test_UnbindAllShouldRemoveAllListeners():Void	{		signal.bind(handler);		signal.bind(anotherHandler);		signal.unbindAll();		Assert.isFalse(signal.hasListeners());	}	@Test	public function test_DispatchShouldExecuteHandler():Void	{		signal.bind(handler);		signal.dispatch("test dispatch message");		Assert.areEqual(1, dispatchCount);		Assert.areEqual("test dispatch message", lastDispatchMessage);	}	@Test	public function test_DispatchShouldNotExecuteNotBindedHandler():Void	{		signal.dispatch("test dispatch message");		Assert.areEqual(0, dispatchCount);		Assert.areEqual("", lastDispatchMessage);	}	function handler(data:String):Void	{		dispatchCount++;		lastDispatchMessage = data;	}	function anotherHandler(data:String):Void	{	}}